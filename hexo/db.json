{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.npmignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1610252438589},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1610252438592},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1610252438594},{"_id":"themes/landscape/README.md","hash":"e7cc82dc79596f36ba05a8139e7d6b2dfc4ae5f9","modified":1610252438596},{"_id":"themes/landscape/_config.yml","hash":"218c5fb76666696c42dc86e2de4711e6b80befbf","modified":1610252438598},{"_id":"themes/landscape/package.json","hash":"d07f326588fef82f1d23ae3101c9ddfff34c132f","modified":1610252438688},{"_id":"source/_posts/JS中箭头函数和普通函数中this的区别.md","hash":"2cbf05b71c30b1788d93dec79bcb9070a65f1c81","modified":1610252438578},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1610252438580},{"_id":"source/_posts/my-first-blog.md","hash":"f0522a593cdd0b696e82d39f979b88bd6ca5294b","modified":1610252438582},{"_id":"source/_posts/this的绑定方式-md.md","hash":"87ba1c7e5d47bb648594b363910c501a1ba7dd84","modified":1610252438584},{"_id":"source/_posts/在vue组件data中可以声明$或_吗.md","hash":"849bec4a5653df783a40693759bd8fe0164e24b9","modified":1610890273074},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1610252438602},{"_id":"themes/landscape/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1610252438604},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1610252438607},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1610252438610},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1610252438612},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1610252438615},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1610252438618},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1610252438674},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1610252438676},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1610252438678},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1610252438680},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1610252438682},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1610252438684},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1610252438686},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1610252438691},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"a7faab4f3601b28107af5b1095b3966c2f88fec8","modified":1610252438625},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1610252438628},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"3beb0d164acacb6f21e1ca2038158a74ab4a73e4","modified":1610252438630},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1610252438633},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1610252438636},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1610252438638},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"89998e6b2929c4ff5093bbf6b86d611d7420be52","modified":1610252438639},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"148bdf714dd1a7bf55e571f13808ceae079200cc","modified":1610252438642},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1610252438644},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1610252438661},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1610252438664},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1610252438667},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1610252438669},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1610252438671},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1610252438672},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1610252438697},{"_id":"themes/landscape/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1610252438728},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1610252438768},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1610252438772},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1610252438774},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1610252438777},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1610252438779},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1610252438783},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1610252438785},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1610252438804},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1610252438808},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1610252438810},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1610252438813},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1610252438651},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1610252438648},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1610252438653},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1610252438655},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1610252438657},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1610252438659},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1610252438702},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1610252438704},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1610252438707},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1610252438709},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1610252438711},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1610252438712},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1610252438714},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1610252438716},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1610252438719},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1610252438721},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1610252438724},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1610252438726},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1610252438734},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1610252438738},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1610252438754},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1610252438789},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1610252438791},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1610252438794},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1610252438797},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1610252438799},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1610252438801},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1610252438751},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1610252438745},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1610252438765},{"_id":"public/2018/10/27/this的绑定方式-md/index.html","hash":"87123c0907ca715e57fe903b3dec112d80a9666e","modified":1610890332859},{"_id":"public/2018/07/24/my-first-blog/index.html","hash":"d5a56fea345ebac36674cbd79fb6b551a432f113","modified":1610890332860},{"_id":"public/archives/index.html","hash":"a5cd27f765d621c4ee568016b289d23207096954","modified":1610890334100},{"_id":"public/archives/2018/index.html","hash":"332f85c1d1cc21272fe876813ec6f88b39b5db7d","modified":1610890334101},{"_id":"public/archives/2018/07/index.html","hash":"f43e54a7484b94930c3d797cd366c8878bc44868","modified":1610890334104},{"_id":"public/archives/2018/10/index.html","hash":"37349a85fa4f46fbfbdaed6a3950d44b2b7d1f25","modified":1610890334105},{"_id":"public/2021/01/10/hello-world/index.html","hash":"9ec414a4ad15c061fbc3d617ae3e0cfda565e416","modified":1610890334153},{"_id":"public/archives/2021/index.html","hash":"b371d83de7bb3e7fbf8364faad075e5f8cd5648e","modified":1610890334154},{"_id":"public/archives/2021/01/index.html","hash":"b2a31a6e4f0ab1a0c0fc3a3c9d024f7d53fe6ea5","modified":1610890334154},{"_id":"public/2021/01/10/JS中箭头函数和普通函数中this的区别/index.html","hash":"27cd27c8ce241665a3ff25dfe44dafcf3e12781d","modified":1610890334154},{"_id":"public/index.html","hash":"d95d8fd1a93419224f36183be584546ba76230cc","modified":1610890334155},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1610890334212},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1610890334213},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1610890334215},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1610890334215},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1610890334216},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1610890334216},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1610890334216},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1610890334219},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1610890334219},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1610890338594},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1610890338599},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1610890338804},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1610890338805},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1610890338805},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1610890338805},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1610890338806},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1610890338806},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1610890338808},{"_id":"public/css/style.css","hash":"fffb3966bf36057a325498aba9ce3a2ea7bd79e1","modified":1610890338809},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1610890338810},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1610890338810},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1610890338956},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1610890339484}],"Category":[],"Data":[],"Page":[],"Post":[{"_content":"# 箭头函数与普通函数的区别\n作为ES6中新加入的箭头函数语法，深受广大开发人员的喜爱，也是平时前端面试过程中经常会被提及问道的典型题目。它不仅简化了我们的代码，而且也让开发人员摆脱了“飘忽不定”的this指向，本文就箭头函数与普通函数的区别进行一些分析。\n\n在我看来，面试官最关注的也是两者最关键的区别就是this指向的区别，普通函数中的this指向函数被调用的对象，因此对于不同的调用者，this的值是不同的。而箭头函数中并没有自己的this（同时，箭头函数中也没有其他的局部变量，如this，argument，super等），所以箭头函数中的this是固定的，它指向定义该函数时所在的对象。\n\n## 普通函数\n相信大家对普通函数的用法已经非常熟悉了，下面我们举一个简单的例子。\n```\nvar a  = 3;\nvar obj = {\n\ta : 1,\n\tfoo : function(){\n\t\tconsole.log(this.a);\n\t}\n}\nobj.foo(); //1\nvar bar = obj;\nbar.a = 2;\nbar.foo(); //2\nvar baz = obj.foo;\nbaz(); //3\n```\n上述代码中，出现了三种情况：\n1. 直接通过obj调用其中的方法foo，此时，this就会指向调用foo函数的对象，也就是obj;\n2. 将obj对象赋给一个新的对象bar，此时通过bar调用foo函数，this的值就会指向调用者bar；\n3. 将obj.foo赋给一个新对象baz，通过baz()调用foo函数，此时的this指向window；\n\n由此我们可以得出结论：\n- 普通函数的this总是指向它的直接调用者。\n- 在严格模式下，没找到直接调用者，则函数中的this是undefined。\n- 在默认模式下（非严格模式），没找到直接调用者，则函数中的this指向window。\n\n再考虑一下下面的情况：\n```\nvar obj = {\n\ta : 1,\n\tfoo : function(){\n\t \tsetTimeout(\n\t\t\tfunction(){console.log(this.a),3000})\n\t}\n}\nobj.foo(); //undefined\n```\n你可能会认为此时的输出应该为1，但是结果却是undefined。因为此时this的指向是全局的window对象。\n通过以上例子，可以得出以下总结：\n- 对于方法（即通过对象调用了该函数），普通函数中的this总是指向它的调用者。\n- 对于一般函数，this指向全局变量（非严格模式下）或者undefined（严格模式下）。在上例中setTimeout中的function未被任何对象调用，因此它的this指向还是window对象。因此，这也可以总结成：javascript 的this 可以简单的认为是后期绑定，没有地方绑定的时候，默认绑定window或undefined。\n\n如果我们希望可以在上例的setTimeout函数中使用this要怎么做呢？在箭头函数出现之前，我们往往会使用以下两种方法：\n1. 在setTimeout函数的外部，也就是上层函数foo内部通过将this值赋给一个临时变量来实现。\n```\nvar obj = {\n    a : 1,\n    foo : function(){\n        var that  = this;\n        setTimeout(\n            function(){console.log(that.a),3000})\n    }\n}\nobj.foo(); //1\n```\n2. 通过bind()来绑定this。\n```\nvar obj = {\n    a : 1,\n    foo : function(){\n        setTimeout(\n            function(){console.log(this.a),3000}.bind(this))\n    }\n}\nobj.foo(); //1\n```\n这种现象在ES6引入箭头函数后得到了改善。\n\n##箭头函数\n箭头函数是ES6中引入的新特性，使用方法为：\n```\n()=>{console.log(this)}\n```\n\n其中()内是要带入的参数，{}内是要执行的语句。箭头函数是函数式编程的一种体现，函数式编程将更多的关注点放在输入和输出的关系，省去了过程的一些因素，因此箭头函数中没有自己的this，arguments，new target（ES6）和 super(ES6)。箭头函数相当于匿名函数，因此不能使用new来作为构造函数使用。\n箭头函数中的this始终指向其父级作用域中的this。换句话说，箭头函数会捕获其所在的上下文的this值，作为自己的this值。任何方法都改变不了其指向，如call(), bind(), apply()。在箭头函数中调用 this 时，仅仅是简单的沿着作用域链向上寻找，找到最近的一个 this 拿来使用，它与调用时的上下文无关。我们用代码来解释一下。\n```\nvar obj = {\n    a: 10,\n    b: () => {\n      console.log(this.a); // undefined\n      console.log(this); // Window {postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, frames: Window, …}\n    },\n    c: function() {\n      console.log(this.a); // 10\n      console.log(this); // {a: 10, b: ƒ, c: ƒ}\n    },\n    d:function(){\n        return ()=>{\n            console.log(this.a); // 10\n        }\n    },\n    e:function(){\n      setTime\n    }\n\n  }\n  obj.b(); \n  obj.c();\n  obj.d()();\n```\n简单分析一下代码，obj.b（）中的this会继承父级上下文中的this值，也就是与obj有相同的this指向，为全局变量window。obj.c()的this指向即为调用者obj，obj.d().()中的this也继承自父级上下文中的this，即d的this指向，也就是obj。\n通过这个例子，也就可以大概的让我们理解普通函数中的this和匿名函数中的this指向差别，从而更好的在工作中根据我们的需求正确合理地使用这两种函数。","source":"_posts/JS中箭头函数和普通函数中this的区别.md","raw":"# 箭头函数与普通函数的区别\n作为ES6中新加入的箭头函数语法，深受广大开发人员的喜爱，也是平时前端面试过程中经常会被提及问道的典型题目。它不仅简化了我们的代码，而且也让开发人员摆脱了“飘忽不定”的this指向，本文就箭头函数与普通函数的区别进行一些分析。\n\n在我看来，面试官最关注的也是两者最关键的区别就是this指向的区别，普通函数中的this指向函数被调用的对象，因此对于不同的调用者，this的值是不同的。而箭头函数中并没有自己的this（同时，箭头函数中也没有其他的局部变量，如this，argument，super等），所以箭头函数中的this是固定的，它指向定义该函数时所在的对象。\n\n## 普通函数\n相信大家对普通函数的用法已经非常熟悉了，下面我们举一个简单的例子。\n```\nvar a  = 3;\nvar obj = {\n\ta : 1,\n\tfoo : function(){\n\t\tconsole.log(this.a);\n\t}\n}\nobj.foo(); //1\nvar bar = obj;\nbar.a = 2;\nbar.foo(); //2\nvar baz = obj.foo;\nbaz(); //3\n```\n上述代码中，出现了三种情况：\n1. 直接通过obj调用其中的方法foo，此时，this就会指向调用foo函数的对象，也就是obj;\n2. 将obj对象赋给一个新的对象bar，此时通过bar调用foo函数，this的值就会指向调用者bar；\n3. 将obj.foo赋给一个新对象baz，通过baz()调用foo函数，此时的this指向window；\n\n由此我们可以得出结论：\n- 普通函数的this总是指向它的直接调用者。\n- 在严格模式下，没找到直接调用者，则函数中的this是undefined。\n- 在默认模式下（非严格模式），没找到直接调用者，则函数中的this指向window。\n\n再考虑一下下面的情况：\n```\nvar obj = {\n\ta : 1,\n\tfoo : function(){\n\t \tsetTimeout(\n\t\t\tfunction(){console.log(this.a),3000})\n\t}\n}\nobj.foo(); //undefined\n```\n你可能会认为此时的输出应该为1，但是结果却是undefined。因为此时this的指向是全局的window对象。\n通过以上例子，可以得出以下总结：\n- 对于方法（即通过对象调用了该函数），普通函数中的this总是指向它的调用者。\n- 对于一般函数，this指向全局变量（非严格模式下）或者undefined（严格模式下）。在上例中setTimeout中的function未被任何对象调用，因此它的this指向还是window对象。因此，这也可以总结成：javascript 的this 可以简单的认为是后期绑定，没有地方绑定的时候，默认绑定window或undefined。\n\n如果我们希望可以在上例的setTimeout函数中使用this要怎么做呢？在箭头函数出现之前，我们往往会使用以下两种方法：\n1. 在setTimeout函数的外部，也就是上层函数foo内部通过将this值赋给一个临时变量来实现。\n```\nvar obj = {\n    a : 1,\n    foo : function(){\n        var that  = this;\n        setTimeout(\n            function(){console.log(that.a),3000})\n    }\n}\nobj.foo(); //1\n```\n2. 通过bind()来绑定this。\n```\nvar obj = {\n    a : 1,\n    foo : function(){\n        setTimeout(\n            function(){console.log(this.a),3000}.bind(this))\n    }\n}\nobj.foo(); //1\n```\n这种现象在ES6引入箭头函数后得到了改善。\n\n##箭头函数\n箭头函数是ES6中引入的新特性，使用方法为：\n```\n()=>{console.log(this)}\n```\n\n其中()内是要带入的参数，{}内是要执行的语句。箭头函数是函数式编程的一种体现，函数式编程将更多的关注点放在输入和输出的关系，省去了过程的一些因素，因此箭头函数中没有自己的this，arguments，new target（ES6）和 super(ES6)。箭头函数相当于匿名函数，因此不能使用new来作为构造函数使用。\n箭头函数中的this始终指向其父级作用域中的this。换句话说，箭头函数会捕获其所在的上下文的this值，作为自己的this值。任何方法都改变不了其指向，如call(), bind(), apply()。在箭头函数中调用 this 时，仅仅是简单的沿着作用域链向上寻找，找到最近的一个 this 拿来使用，它与调用时的上下文无关。我们用代码来解释一下。\n```\nvar obj = {\n    a: 10,\n    b: () => {\n      console.log(this.a); // undefined\n      console.log(this); // Window {postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, frames: Window, …}\n    },\n    c: function() {\n      console.log(this.a); // 10\n      console.log(this); // {a: 10, b: ƒ, c: ƒ}\n    },\n    d:function(){\n        return ()=>{\n            console.log(this.a); // 10\n        }\n    },\n    e:function(){\n      setTime\n    }\n\n  }\n  obj.b(); \n  obj.c();\n  obj.d()();\n```\n简单分析一下代码，obj.b（）中的this会继承父级上下文中的this值，也就是与obj有相同的this指向，为全局变量window。obj.c()的this指向即为调用者obj，obj.d().()中的this也继承自父级上下文中的this，即d的this指向，也就是obj。\n通过这个例子，也就可以大概的让我们理解普通函数中的this和匿名函数中的this指向差别，从而更好的在工作中根据我们的需求正确合理地使用这两种函数。","slug":"JS中箭头函数和普通函数中this的区别","published":1,"date":"2021-01-10T04:20:38.578Z","updated":"2021-01-10T04:20:38.578Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk16id240000wku0785jo18j","content":"<h1 id=\"箭头函数与普通函数的区别\"><a href=\"#箭头函数与普通函数的区别\" class=\"headerlink\" title=\"箭头函数与普通函数的区别\"></a>箭头函数与普通函数的区别</h1><p>作为ES6中新加入的箭头函数语法，深受广大开发人员的喜爱，也是平时前端面试过程中经常会被提及问道的典型题目。它不仅简化了我们的代码，而且也让开发人员摆脱了“飘忽不定”的this指向，本文就箭头函数与普通函数的区别进行一些分析。</p>\n<p>在我看来，面试官最关注的也是两者最关键的区别就是this指向的区别，普通函数中的this指向函数被调用的对象，因此对于不同的调用者，this的值是不同的。而箭头函数中并没有自己的this（同时，箭头函数中也没有其他的局部变量，如this，argument，super等），所以箭头函数中的this是固定的，它指向定义该函数时所在的对象。</p>\n<h2 id=\"普通函数\"><a href=\"#普通函数\" class=\"headerlink\" title=\"普通函数\"></a>普通函数</h2><p>相信大家对普通函数的用法已经非常熟悉了，下面我们举一个简单的例子。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a  = 3;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta : 1,</span><br><span class=\"line\">\tfoo : function()&#123;</span><br><span class=\"line\">\t\tconsole.log(this.a);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.foo(); //1</span><br><span class=\"line\">var bar = obj;</span><br><span class=\"line\">bar.a = 2;</span><br><span class=\"line\">bar.foo(); //2</span><br><span class=\"line\">var baz = obj.foo;</span><br><span class=\"line\">baz(); //3</span><br></pre></td></tr></table></figure></p>\n<p>上述代码中，出现了三种情况：</p>\n<ol>\n<li>直接通过obj调用其中的方法foo，此时，this就会指向调用foo函数的对象，也就是obj;</li>\n<li>将obj对象赋给一个新的对象bar，此时通过bar调用foo函数，this的值就会指向调用者bar；</li>\n<li>将obj.foo赋给一个新对象baz，通过baz()调用foo函数，此时的this指向window；</li>\n</ol>\n<p>由此我们可以得出结论：</p>\n<ul>\n<li>普通函数的this总是指向它的直接调用者。</li>\n<li>在严格模式下，没找到直接调用者，则函数中的this是undefined。</li>\n<li>在默认模式下（非严格模式），没找到直接调用者，则函数中的this指向window。</li>\n</ul>\n<p>再考虑一下下面的情况：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta : 1,</span><br><span class=\"line\">\tfoo : function()&#123;</span><br><span class=\"line\">\t \tsetTimeout(</span><br><span class=\"line\">\t\t\tfunction()&#123;console.log(this.a),3000&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.foo(); //undefined</span><br></pre></td></tr></table></figure></p>\n<p>你可能会认为此时的输出应该为1，但是结果却是undefined。因为此时this的指向是全局的window对象。<br>通过以上例子，可以得出以下总结：</p>\n<ul>\n<li>对于方法（即通过对象调用了该函数），普通函数中的this总是指向它的调用者。</li>\n<li>对于一般函数，this指向全局变量（非严格模式下）或者undefined（严格模式下）。在上例中setTimeout中的function未被任何对象调用，因此它的this指向还是window对象。因此，这也可以总结成：javascript 的this 可以简单的认为是后期绑定，没有地方绑定的时候，默认绑定window或undefined。</li>\n</ul>\n<p>如果我们希望可以在上例的setTimeout函数中使用this要怎么做呢？在箭头函数出现之前，我们往往会使用以下两种方法：</p>\n<ol>\n<li><p>在setTimeout函数的外部，也就是上层函数foo内部通过将this值赋给一个临时变量来实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">    a : 1,</span><br><span class=\"line\">    foo : function()&#123;</span><br><span class=\"line\">        var that  = this;</span><br><span class=\"line\">        setTimeout(</span><br><span class=\"line\">            function()&#123;console.log(that.a),3000&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.foo(); //1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过bind()来绑定this。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">    a : 1,</span><br><span class=\"line\">    foo : function()&#123;</span><br><span class=\"line\">        setTimeout(</span><br><span class=\"line\">            function()&#123;console.log(this.a),3000&#125;.bind(this))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.foo(); //1</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这种现象在ES6引入箭头函数后得到了改善。</p>\n<p>##箭头函数<br>箭头函数是ES6中引入的新特性，使用方法为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">()=&gt;&#123;console.log(this)&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中()内是要带入的参数，{}内是要执行的语句。箭头函数是函数式编程的一种体现，函数式编程将更多的关注点放在输入和输出的关系，省去了过程的一些因素，因此箭头函数中没有自己的this，arguments，new target（ES6）和 super(ES6)。箭头函数相当于匿名函数，因此不能使用new来作为构造函数使用。<br>箭头函数中的this始终指向其父级作用域中的this。换句话说，箭头函数会捕获其所在的上下文的this值，作为自己的this值。任何方法都改变不了其指向，如call(), bind(), apply()。在箭头函数中调用 this 时，仅仅是简单的沿着作用域链向上寻找，找到最近的一个 this 拿来使用，它与调用时的上下文无关。我们用代码来解释一下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">    a: 10,</span><br><span class=\"line\">    b: () =&gt; &#123;</span><br><span class=\"line\">      console.log(this.a); // undefined</span><br><span class=\"line\">      console.log(this); // Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, frames: Window, …&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    c: function() &#123;</span><br><span class=\"line\">      console.log(this.a); // 10</span><br><span class=\"line\">      console.log(this); // &#123;a: 10, b: ƒ, c: ƒ&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    d:function()&#123;</span><br><span class=\"line\">        return ()=&gt;&#123;</span><br><span class=\"line\">            console.log(this.a); // 10</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    e:function()&#123;</span><br><span class=\"line\">      setTime</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  obj.b(); </span><br><span class=\"line\">  obj.c();</span><br><span class=\"line\">  obj.d()();</span><br></pre></td></tr></table></figure></p>\n<p>简单分析一下代码，obj.b（）中的this会继承父级上下文中的this值，也就是与obj有相同的this指向，为全局变量window。obj.c()的this指向即为调用者obj，obj.d().()中的this也继承自父级上下文中的this，即d的this指向，也就是obj。<br>通过这个例子，也就可以大概的让我们理解普通函数中的this和匿名函数中的this指向差别，从而更好的在工作中根据我们的需求正确合理地使用这两种函数。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"箭头函数与普通函数的区别\"><a href=\"#箭头函数与普通函数的区别\" class=\"headerlink\" title=\"箭头函数与普通函数的区别\"></a>箭头函数与普通函数的区别</h1><p>作为ES6中新加入的箭头函数语法，深受广大开发人员的喜爱，也是平时前端面试过程中经常会被提及问道的典型题目。它不仅简化了我们的代码，而且也让开发人员摆脱了“飘忽不定”的this指向，本文就箭头函数与普通函数的区别进行一些分析。</p>\n<p>在我看来，面试官最关注的也是两者最关键的区别就是this指向的区别，普通函数中的this指向函数被调用的对象，因此对于不同的调用者，this的值是不同的。而箭头函数中并没有自己的this（同时，箭头函数中也没有其他的局部变量，如this，argument，super等），所以箭头函数中的this是固定的，它指向定义该函数时所在的对象。</p>\n<h2 id=\"普通函数\"><a href=\"#普通函数\" class=\"headerlink\" title=\"普通函数\"></a>普通函数</h2><p>相信大家对普通函数的用法已经非常熟悉了，下面我们举一个简单的例子。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a  = 3;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta : 1,</span><br><span class=\"line\">\tfoo : function()&#123;</span><br><span class=\"line\">\t\tconsole.log(this.a);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.foo(); //1</span><br><span class=\"line\">var bar = obj;</span><br><span class=\"line\">bar.a = 2;</span><br><span class=\"line\">bar.foo(); //2</span><br><span class=\"line\">var baz = obj.foo;</span><br><span class=\"line\">baz(); //3</span><br></pre></td></tr></table></figure></p>\n<p>上述代码中，出现了三种情况：</p>\n<ol>\n<li>直接通过obj调用其中的方法foo，此时，this就会指向调用foo函数的对象，也就是obj;</li>\n<li>将obj对象赋给一个新的对象bar，此时通过bar调用foo函数，this的值就会指向调用者bar；</li>\n<li>将obj.foo赋给一个新对象baz，通过baz()调用foo函数，此时的this指向window；</li>\n</ol>\n<p>由此我们可以得出结论：</p>\n<ul>\n<li>普通函数的this总是指向它的直接调用者。</li>\n<li>在严格模式下，没找到直接调用者，则函数中的this是undefined。</li>\n<li>在默认模式下（非严格模式），没找到直接调用者，则函数中的this指向window。</li>\n</ul>\n<p>再考虑一下下面的情况：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta : 1,</span><br><span class=\"line\">\tfoo : function()&#123;</span><br><span class=\"line\">\t \tsetTimeout(</span><br><span class=\"line\">\t\t\tfunction()&#123;console.log(this.a),3000&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.foo(); //undefined</span><br></pre></td></tr></table></figure></p>\n<p>你可能会认为此时的输出应该为1，但是结果却是undefined。因为此时this的指向是全局的window对象。<br>通过以上例子，可以得出以下总结：</p>\n<ul>\n<li>对于方法（即通过对象调用了该函数），普通函数中的this总是指向它的调用者。</li>\n<li>对于一般函数，this指向全局变量（非严格模式下）或者undefined（严格模式下）。在上例中setTimeout中的function未被任何对象调用，因此它的this指向还是window对象。因此，这也可以总结成：javascript 的this 可以简单的认为是后期绑定，没有地方绑定的时候，默认绑定window或undefined。</li>\n</ul>\n<p>如果我们希望可以在上例的setTimeout函数中使用this要怎么做呢？在箭头函数出现之前，我们往往会使用以下两种方法：</p>\n<ol>\n<li><p>在setTimeout函数的外部，也就是上层函数foo内部通过将this值赋给一个临时变量来实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">    a : 1,</span><br><span class=\"line\">    foo : function()&#123;</span><br><span class=\"line\">        var that  = this;</span><br><span class=\"line\">        setTimeout(</span><br><span class=\"line\">            function()&#123;console.log(that.a),3000&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.foo(); //1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过bind()来绑定this。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">    a : 1,</span><br><span class=\"line\">    foo : function()&#123;</span><br><span class=\"line\">        setTimeout(</span><br><span class=\"line\">            function()&#123;console.log(this.a),3000&#125;.bind(this))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.foo(); //1</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这种现象在ES6引入箭头函数后得到了改善。</p>\n<p>##箭头函数<br>箭头函数是ES6中引入的新特性，使用方法为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">()=&gt;&#123;console.log(this)&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中()内是要带入的参数，{}内是要执行的语句。箭头函数是函数式编程的一种体现，函数式编程将更多的关注点放在输入和输出的关系，省去了过程的一些因素，因此箭头函数中没有自己的this，arguments，new target（ES6）和 super(ES6)。箭头函数相当于匿名函数，因此不能使用new来作为构造函数使用。<br>箭头函数中的this始终指向其父级作用域中的this。换句话说，箭头函数会捕获其所在的上下文的this值，作为自己的this值。任何方法都改变不了其指向，如call(), bind(), apply()。在箭头函数中调用 this 时，仅仅是简单的沿着作用域链向上寻找，找到最近的一个 this 拿来使用，它与调用时的上下文无关。我们用代码来解释一下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">    a: 10,</span><br><span class=\"line\">    b: () =&gt; &#123;</span><br><span class=\"line\">      console.log(this.a); // undefined</span><br><span class=\"line\">      console.log(this); // Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, frames: Window, …&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    c: function() &#123;</span><br><span class=\"line\">      console.log(this.a); // 10</span><br><span class=\"line\">      console.log(this); // &#123;a: 10, b: ƒ, c: ƒ&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    d:function()&#123;</span><br><span class=\"line\">        return ()=&gt;&#123;</span><br><span class=\"line\">            console.log(this.a); // 10</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    e:function()&#123;</span><br><span class=\"line\">      setTime</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  obj.b(); </span><br><span class=\"line\">  obj.c();</span><br><span class=\"line\">  obj.d()();</span><br></pre></td></tr></table></figure></p>\n<p>简单分析一下代码，obj.b（）中的this会继承父级上下文中的this值，也就是与obj有相同的this指向，为全局变量window。obj.c()的this指向即为调用者obj，obj.d().()中的this也继承自父级上下文中的this，即d的this指向，也就是obj。<br>通过这个例子，也就可以大概的让我们理解普通函数中的this和匿名函数中的this指向差别，从而更好的在工作中根据我们的需求正确合理地使用这两种函数。</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2021-01-10T04:20:38.580Z","updated":"2021-01-10T04:20:38.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk16idha0001wku038yxis67","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"my first blog","date":"2018-07-24T14:03:35.000Z","_content":"","source":"_posts/my-first-blog.md","raw":"---\ntitle: my first blog\ndate: 2018-07-24 22:03:35\ntags:\n---\n","slug":"my-first-blog","published":1,"updated":"2021-01-10T04:20:38.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk16idhv0002wku09a77ypnx","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"this的绑定方式.md","date":"2018-10-27T10:09:28.000Z","_content":"","source":"_posts/this的绑定方式-md.md","raw":"---\ntitle: this的绑定方式.md\ndate: 2018-10-27 18:09:28\ntags:\n---\n","slug":"this的绑定方式-md","published":1,"updated":"2021-01-10T04:20:38.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk16idi90003wku01mfiwy4a","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}